{
    "Configuration" : {
        "Comment" : "Configuration contains the configuration for the server.",
        "Fields" : [
            { "name" : "Datacenter",    "type" : "string",        "comment" : "Datacenter specifies the Datacenter where the instance is running." },
            { "name" : "Environment",   "type" : "string",        "comment" : "Environment specifies the deployment environment." },
            { "name" : "ServiceName",   "type" : "string",        "comment" : "ServiceName specifies the service name to be used in logs and folders names." },
            { "name" : "HTTP",          "type" : "HTTPServer",    "comment" : "HTTP contains the config for the Public HTTP." },
            { "name" : "HTTPS",         "type" : "HTTPServer",    "comment" : "HTTPS contains the config for the HTTPS/JSON API Service." },
            { "name" : "Authz",         "type" : "Authz",         "comment" : "Authz contains configuration for the API authorization layer." },
            { "name" : "Audit",         "type" : "Logger",        "comment" : "Audit contains configuration for the audit logger." },
            { "name" : "Metrics",       "type" : "Metrics",       "comment" : "Metrics specifies the metrics pipeline configuration." },
            { "name" : "Logger",        "type" : "Logger",        "comment" : "Logger contains configuration for the logger." },
            { "name" : "LogLevels",     "type" : "[]RepoLogLevel","comment" : "LogLevels specifies the log levels per package." },
            { "name" : "RootCA",        "type" : "string",        "comment" : "RootCA specifies the location of PEM-encoded certificate." },
            { "name" : "Jokes",         "type" : "Jokes",         "comment" : "Jokes provides configuration for jokes service." }
        ]
    },
    "RelatedTypes" : {
        "Authz" : {
            "comment" : "Authz contains configuration for the authorization module.",
            "WithGetter" : true,
            "Fields" : [
              { "name" : "Allow",        "type" : "[]string", "comment" : "Allow will allow the specified roles access to this path and its children, in format: ${path}:${role},${role}." },
              { "name" : "AllowAny",     "type" : "[]string", "comment" : "AllowAny will allow any authenticated request access to this path and its children." },
              { "name" : "AllowAnyRole", "type" : "[]string", "comment" : "AllowAnyRole will allow any authenticated request that include a non empty role." },
              { "name" : "LogAllowed",   "type" : "*bool",    "comment" : "LogAllowed specifies to log allowed access." },
              { "name" : "LogDenied",    "type" : "*bool",    "comment" : "LogDenied specifies to log denied access." },
              { "name" : "CertMapper",   "type" : "string",   "comment" : "CertMapper specifies location of the config file for certificate based identity." },
              { "name" : "APIKeyMapper", "type" : "string",   "comment" : "APIKeyMapper specifies location of the config file for API-Key based identity." },
              { "name" : "JWTMapper",    "type" : "string",   "comment" : "JWTMapper specifies location of the config file for JWT based identity." }
            ]
        },
        "RepoLogLevel" : {
            "comment" : "RepoLogLevel contains information about the log level per repo. Use * to set up global level.",
            "Fields" : [
              { "name" : "Repo",    "type" : "string", "comment" : "Repo specifies the repo name, or '*' for all repos [Global]." },
              { "name" : "Package", "type" : "string", "comment" : "Package specifies the package name." },
              { "name" : "Level",   "type" : "string", "comment" : "Level specifies the log level for the repo [ERROR,WARNING,NOTICE,INFO,DEBUG,TRACE]." }
            ]
        },
        "Logger" : {
            "comment" : "Logger contains information about the configuration of a logger/log rotation.",
            "WithGetter" : true,
            "Fields" : [
              { "name" : "Directory", "type" : "string", "comment" : "Directory contains where to store the log files." },
              { "name" : "MaxAgeDays","type" : "int",    "comment" : "MaxAgeDays controls how old files are before deletion." },
              { "name" : "MaxSizeMb", "type" : "int",    "comment" : "MaxSizeMb contols how large a single log file can be before its rotated." }
            ]
        },
        "TLSInfo" : {
            "Comment" : "TLSInfo contains configuration info for the TLS.",
            "WithGetter" : true,
            "Fields" : [
                { "name" : "CertFile",       "type" : "string", "comment" : "CertFile specifies location of the cert." },
                { "name" : "KeyFile",        "type" : "string", "comment" : "KeyFile specifies location of the key." },
                { "name" : "TrustedCAFile",  "type" : "string", "comment" : "TrustedCAFile specifies location of the trusted Root file." },
                { "name" : "ClientCertAuth", "type" : "string", "comment" : "ClientCertAuth controls client auth: NoClientCert|RequestClientCert|RequireAnyClientCert|VerifyClientCertIfGiven|RequireAndVerifyClientCert" }
            ]
        },
        "Metrics" : {
            "Comment" : "Metrics specifies the metrics pipeline configuration.",
            "Fields" : [
                { "name" : "Provider",    "type" : "string", "comment" : "Provider specifies the metrics provider." }
            ]
        },
        "CORS" : {
            "comment" : "CORS contains configuration for CORS.",
            "WithGetter" : true,
            "Fields" : [
              { "name" : "Enabled",            "type" : "*bool",    "comment" : "Enabled specifies if the CORS is enabled." },
              { "name" : "MaxAge",             "type" : "int",      "comment" : "MaxAge indicates how long (in seconds) the results of a preflight request can be cached." },
              { "name" : "AllowedOrigins",     "type" : "[]string", "comment" : "AllowedOrigins is a list of origins a cross-domain request can be executed from." },
              { "name" : "AllowedMethods",     "type" : "[]string", "comment" : "AllowedMethods is a list of methods the client is allowed to use with cross-domain requests." },
              { "name" : "AllowedHeaders",     "type" : "[]string", "comment" : "AllowedHeaders is list of non simple headers the client is allowed to use with cross-domain requests." },
              { "name" : "ExposedHeaders",     "type" : "[]string", "comment" : "ExposedHeaders indicates which headers are safe to expose to the API of a CORS API specification." },
              { "name" : "AllowCredentials",   "type" : "*bool",    "comment" : "AllowCredentials indicates whether the request can include user credentials." },
              { "name" : "OptionsPassthrough", "type" : "*bool",    "comment" : "OptionsPassthrough instructs preflight to let other potential next handlers to process the OPTIONS method." },
              { "name" : "Debug",              "type" : "*bool",    "comment" : "Debug flag adds additional output to debug server side CORS issues." }
            ]
        },
        "HTTPServer" : {
            "Comment" : "HTTPServer contains the configuration of the HTTPS API Service.",
            "WithGetter" : true,
            "Fields" : [
              { "name" : "ServiceName",    "type" : "string",  "comment" : "ServiceName specifies name of the service: HTTP|HTTPS|WebAPI." },
              { "name" : "Disabled",       "type" : "*bool",   "comment" : "Disabled specifies if the service is disabled." },
              { "name" : "VIPName",        "type" : "string",  "comment" : "VIPName is the FQ name of the VIP to the cluster [this is used when building the cert requests]." },
              { "name" : "BindAddr",       "type" : "string",  "comment" : "BindAddr is the address that the HTTPS service should be exposed on" },
              { "name" : "ServerTLS",      "type" : "TLSInfo", "comment" : "ServerTLS provides TLS config for server." },
              { "name" : "PackageLogger",  "type" : "string",  "comment" : "PackageLogger if set, specifies name of the package logger." },
              { "name" : "AllowProfiling", "type" : "*bool",   "comment" : "AllowProfiling if set, will allow for per request CPU/Memory profiling triggered by the URI QueryString." },
              { "name" : "ProfilerDir",    "type" : "string",  "comment" : "ProfilerDir specifies the directories where per-request profile information is written, if not set will write to a TMP dir." },
              { "name" : "Services",       "type" : "[]string","comment" : "Services is a list of services to enable for this HTTP Service." },
              { "name" : "HeartbeatSecs",  "type" : "int",     "comment" : "HeartbeatSecs specifies heartbeat interval in seconds [30 secs is a minimum]." },
              { "name" : "CORS",           "type" : "CORS",    "comment" : "CORS contains configuration for CORS." }
            ]
        },
        "Jokes" : {
            "comment" : "Jokes provides configuration for jokes service.",
            "Fields" : [
              { "name" : "NameSvcURL",  "type" : "string",   "comment" : "NameSvcURL provides a URL of the Name service" },
              { "name" : "Categories",  "type" : "[]string", "comment" : "Categories specifies joke categories" },
              { "name" : "JokesSvcURL", "type" : "string",   "comment" : "JokesSvcURL provides a URL of the Name service" }
            ]
        }
    }
}
